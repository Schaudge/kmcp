// Code generated by command: go run asm.go -out asm.s -stubs xxx.go. DO NOT EDIT.

#include "textflag.h"

// func TransposeOneColumn(buf *[64]byte, pointers *[64]*[]byte, pos int)
TEXT Â·TransposeOneColumn(SB), NOSPLIT|NOPTR, $0-24
	// pointer of buf
	MOVQ buf+0(FP), AX

	// pointer of pointers
	MOVQ pointers+8(FP), CX

	// position pos
	MOVQ pos+16(FP), DX

	// //////////////////////////////////////////////////////////////////////
	// =======================[group 1/8]=======================
	// reset the m64
	XORQ SI, SI

	// ------------------[byte 1/8]------------------
	// address of []byte, not just *[]byte
	MOVQ (CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 2/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 8(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 3/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 16(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 4/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 24(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 5/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 32(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 6/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 40(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 7/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 48(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 8/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 56(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// -----------------------------------------
	// write 8 bytes
	MOVQ SI, (AX)

	// =======================[group 2/8]=======================
	// reset the m64
	XORQ SI, SI

	// ------------------[byte 1/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 64(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 2/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 72(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 3/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 80(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 4/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 88(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 5/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 96(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 6/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 104(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 7/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 112(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 8/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 120(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// -----------------------------------------
	// write 8 bytes
	MOVQ SI, 8(AX)

	// =======================[group 3/8]=======================
	// reset the m64
	XORQ SI, SI

	// ------------------[byte 1/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 128(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 2/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 136(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 3/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 144(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 4/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 152(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 5/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 160(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 6/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 168(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 7/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 176(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 8/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 184(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// -----------------------------------------
	// write 8 bytes
	MOVQ SI, 16(AX)

	// =======================[group 4/8]=======================
	// reset the m64
	XORQ SI, SI

	// ------------------[byte 1/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 192(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 2/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 200(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 3/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 208(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 4/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 216(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 5/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 224(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 6/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 232(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 7/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 240(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 8/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 248(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// -----------------------------------------
	// write 8 bytes
	MOVQ SI, 24(AX)

	// =======================[group 5/8]=======================
	// reset the m64
	XORQ SI, SI

	// ------------------[byte 1/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 256(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 2/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 264(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 3/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 272(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 4/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 280(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 5/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 288(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 6/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 296(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 7/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 304(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 8/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 312(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// -----------------------------------------
	// write 8 bytes
	MOVQ SI, 32(AX)

	// =======================[group 6/8]=======================
	// reset the m64
	XORQ SI, SI

	// ------------------[byte 1/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 320(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 2/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 328(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 3/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 336(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 4/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 344(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 5/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 352(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 6/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 360(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 7/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 368(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 8/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 376(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// -----------------------------------------
	// write 8 bytes
	MOVQ SI, 40(AX)

	// =======================[group 7/8]=======================
	// reset the m64
	XORQ SI, SI

	// ------------------[byte 1/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 384(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 2/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 392(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 3/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 400(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 4/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 408(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 5/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 416(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 6/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 424(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 7/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 432(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 8/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 440(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// -----------------------------------------
	// write 8 bytes
	MOVQ SI, 48(AX)

	// =======================[group 8/8]=======================
	// reset the m64
	XORQ SI, SI

	// ------------------[byte 1/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 448(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 2/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 456(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 3/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 464(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 4/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 472(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 5/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 480(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 6/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 488(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 7/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 496(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// ------------------[byte 8/8]------------------
	// address of []byte, not just *[]byte
	MOVQ 504(CX), BX

	// address of slice data
	MOVQ (BX), BX

	// read byte
	ADDQ DX, BX
	MOVB (BX), BL

	// add to m64 and ror
	MOVBQZX BL, BX
	ADDQ    BX, SI
	RORQ    $0x08, SI

	// -----------------------------------------
	// write 8 bytes
	MOVQ SI, 56(AX)

	// //////////////////////////////////////////////////////////////////////
	RET
